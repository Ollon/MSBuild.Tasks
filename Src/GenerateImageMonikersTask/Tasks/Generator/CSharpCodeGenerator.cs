//-----------------------------------------------------------------------
// <copyright file="CSharpCodeGenerator.cs" company="Ollon, LLC">
//     Copyright (c) 2017 Ollon, LLC. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Formatting;
using System;
using System.CodeDom;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;

namespace MSBuild.Tasks.Tasks.Generator
{
    internal sealed class CSharpCodeGenerator : AbstractCodeGenerator
    {

        public CSharpCodeGenerator(TaskLoggingHelper logger) : base(logger)
        {
        }

        private void Log(string message, params object[] args)
        {
            Logger.LogMessage(MessageImportance.High, message, args);
        }
        protected override void GenerateCodeCore(CodeGenerationContext context)
        {
            Log("Generating Image Moniker class {0}...", context.MonikerClass);
            ClassDeclarationSyntax monikerClass = GenerateMonikerClass(context);
            Log("Generating Image ID class {0}...", context.ImageIdClass);
            ClassDeclarationSyntax imageIdsClass = GenerateImageIdsClass(context);

            CompilationUnitSyntax monikerCompilationUnit = GenerateCompilationUnit(context, monikerClass);
            CompilationUnitSyntax imageIdsCompilationUnit = GenerateCompilationUnit(context, imageIdsClass);

            if (File.Exists(context.MonikerFile))
                File.Delete(context.MonikerFile);

            if (File.Exists(context.ImageIdFile))
                File.Delete(context.ImageIdFile);

            using (FileStream file = new FileStream(context.MonikerFile, FileMode.CreateNew, FileAccess.ReadWrite))
            using (StreamWriter writer = new StreamWriter(file))
            {
                Log("Writing Image Moniker class {0} to disk...", context.MonikerClass);
                monikerCompilationUnit.WriteTo(writer);
            }


            using (FileStream file = new FileStream(context.ImageIdFile, FileMode.CreateNew, FileAccess.ReadWrite))
            using (StreamWriter writer = new StreamWriter(file))
            {
                Log("Writing Image ID class {0} to disk...", context.ImageIdClass);
                imageIdsCompilationUnit.WriteTo(writer);
            }



        }



        private static CompilationUnitSyntax GenerateCompilationUnit(CodeGenerationContext context, ClassDeclarationSyntax generatedClass)
        {
            CompilationUnitSyntax unit = SyntaxFactory.CompilationUnit();
            unit = unit.WithUsings(GenerateUsings("System", "Microsoft.VisualStudio.Imaging.Interop"));

            NamespaceDeclarationSyntax namespaceDeclaration = GenerateNamespaceDeclaration(context.Namespace);

            namespaceDeclaration = namespaceDeclaration.AddMembers(generatedClass);

            unit = unit.AddMembers(namespaceDeclaration);

            unit = unit.WithLeadingTrivia(GenerateAutoGeneratedWarningHeader());

            using (AdhocWorkspace ws = new AdhocWorkspace())
            {
                return (CompilationUnitSyntax)Formatter.Format(unit, ws, ws.Options);
            }
        }

        private static ClassDeclarationSyntax GenerateImageIdsClass(CodeGenerationContext context)
        {
            ClassDeclarationSyntax classDeclaration = SyntaxFactory.ClassDeclaration(context.ImageIdClass);
            SyntaxTokenList modifiers = new SyntaxTokenList();
            ImageManifest manifest = context.ImageManifest;
            switch (context.ClassAccess)
            {
                case "public":
                    {
                        modifiers = Modifiers.PublicStaticPartial;
                        break;
                    }
                case "internal":
                    {
                        modifiers = Modifiers.InternalStaticPartial;
                        break;
                    }
            }
            IEnumerable<ImageManifestGuid> imageManifestGuids = manifest.Symbols.OfType<ImageManifestGuid>();
            IEnumerable<ImageManifestID> imageManifestIDs = manifest.Symbols.OfType<ImageManifestID>();
            foreach (ImageManifestGuid guid in imageManifestGuids)
            {
                classDeclaration = classDeclaration.AddMembers(GenerateImageIdsGuidField(guid.Name, guid.Value));
            }
            foreach (ImageManifestID id in imageManifestIDs)
            {
                classDeclaration = classDeclaration.AddMembers(GenerateImageIdsConstantIdField(id.Name, id.Value));
            }


            return classDeclaration;

        }
        private static ClassDeclarationSyntax GenerateMonikerClass(CodeGenerationContext context)
        {
            ClassDeclarationSyntax classDeclaration = SyntaxFactory.ClassDeclaration(context.MonikerClass);
            SyntaxTokenList modifiers = new SyntaxTokenList();
            switch (context.ClassAccess)
            {
                case "public":
                    {
                        modifiers = Modifiers.PublicStaticPartial;
                        break;
                    }
                case "internal":
                    {
                        modifiers = Modifiers.InternalStaticPartial;
                        break;
                    }
            }

            classDeclaration = classDeclaration.WithModifiers(modifiers);
            foreach (ImageManifestGuid symbol in context.ImageManifest.Symbols.OfType<ImageManifestGuid>())
            {
                if (context.ImageManifest.Images != null)
                {
                    IEnumerable<ImageManifestImage> images = context.ImageManifest.Images.AsEnumerable();
                    foreach (ImageManifestImage image in images.Where(ii => ii.Guid.Trim(SymbolChars) == symbol.Name))
                    {
                        string monikerId = image.ID.Trim(SymbolChars);
                        classDeclaration =
                            classDeclaration.AddMembers(
                                GenerateImageMonikerProperty(monikerId, context.ImageIdClass, symbol.Name));
                    }
                }
                if (context.ImageManifest.ImageLists != null)
                {
                    IEnumerable<ImageManifestImageList> imageLists = context.ImageManifest.ImageLists.AsEnumerable();
                    foreach (ImageManifestImageList imageList in imageLists)
                    {
                        string monikerId = imageList.ID.Trim(SymbolChars);
                        classDeclaration =
                            classDeclaration.AddMembers(
                                GenerateImageMonikerProperty(monikerId, context.ImageIdClass, symbol.Name));
                    }
                }

            }
            return classDeclaration;
        }

        private static readonly char[] SymbolChars = new char[] { '$', '(', ')' };



        public static bool SwitchedTypes(Type lastType, Type currentType)
        {
            return !(lastType == null) && (!(lastType != typeof(ImageManifestGuid)) || !(lastType != typeof(ImageManifestID))) && ((!(currentType != typeof(ImageManifestGuid)) || !(currentType != typeof(ImageManifestID))) && !(lastType == currentType));
        }


        private static FieldDeclarationSyntax GenerateImageIdsConstantIdField(string identifierName, int value)
        {
            return SyntaxFactory.FieldDeclaration(
                    SyntaxFactory.VariableDeclaration(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.IntKeyword)))
                    .WithVariables(
                        SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                            SyntaxFactory.VariableDeclarator(
                                SyntaxFactory.Identifier(identifierName))
                            .WithInitializer(
                                SyntaxFactory.EqualsValueClause(
                                    SyntaxFactory.LiteralExpression(
                                        SyntaxKind.NumericLiteralExpression,
                                        SyntaxFactory.Literal(value)))))))
                .WithModifiers(Modifiers.PublicConst);
        }
        private static SyntaxTriviaList GenerateAutoGeneratedWarningHeader()
        {
            return SyntaxFactory.TriviaList(
                    new[]{
                        SyntaxFactory.Comment("//-----------------------------------------------------------------------------"),
                        SyntaxFactory.CarriageReturnLineFeed,
                        SyntaxFactory.Comment("// <auto-generated>"),
                        SyntaxFactory.CarriageReturnLineFeed,
                        SyntaxFactory.Comment("//     This code was generated by the GenerateImageMonikers Task."),
                        SyntaxFactory.CarriageReturnLineFeed,
                        SyntaxFactory.Comment("//     Tool Version: 1.0.0.0"),
                        SyntaxFactory.CarriageReturnLineFeed,
                        SyntaxFactory.Comment("// </auto-generated>"),
                        SyntaxFactory.CarriageReturnLineFeed,
                        SyntaxFactory.Comment("//-----------------------------------------------------------------------------"),
                        SyntaxFactory.CarriageReturnLineFeed,
                        SyntaxFactory.CarriageReturnLineFeed});
        }

        private static FieldDeclarationSyntax GenerateImageIdsGuidField(string imageIdsGuidIdentifierName, string guidString)
        {
            return SyntaxFactory.FieldDeclaration(
                    SyntaxFactory.VariableDeclaration(
                        SyntaxFactory.IdentifierName("Guid"))
                    .WithVariables(
                        SyntaxFactory.SingletonSeparatedList(
                            SyntaxFactory.VariableDeclarator(
                                SyntaxFactory.Identifier(imageIdsGuidIdentifierName))
                            .WithInitializer(
                                SyntaxFactory.EqualsValueClause(
                                    SyntaxFactory.ObjectCreationExpression(
                                        SyntaxFactory.IdentifierName("Guid"))
                                    .WithArgumentList(
                                        SyntaxFactory.ArgumentList(
                                            SyntaxFactory.SingletonSeparatedList(
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.LiteralExpression(
                                                        SyntaxKind.StringLiteralExpression,
                                                        SyntaxFactory.Literal(guidString)))))))))))
                .WithModifiers(Modifiers.PublicStaticReadonly);
        }

        private static PropertyDeclarationSyntax GenerateImageMonikerProperty(string monikerIdentifierName, string imageIdsClassName, string guidSymbolName)
        {

            return SyntaxFactory.PropertyDeclaration(
                    SyntaxFactory.IdentifierName("ImageMoniker"),
                    SyntaxFactory.Identifier(monikerIdentifierName))
                .WithModifiers(Modifiers.PublicStatic)
                .WithAccessorList(
                    SyntaxFactory.AccessorList(
                        SyntaxFactory.SingletonList(
                            SyntaxFactory.AccessorDeclaration(
                                SyntaxKind.GetAccessorDeclaration)
                            .WithBody(
                                SyntaxFactory.Block(
                                    SyntaxFactory.SingletonList<StatementSyntax>(
                                        SyntaxFactory.ReturnStatement(
                                            SyntaxFactory.ObjectCreationExpression(
                                                SyntaxFactory.IdentifierName("ImageMoniker"))
                                            .WithInitializer(
                                                SyntaxFactory.InitializerExpression(
                                                    SyntaxKind.ObjectInitializerExpression,
                                                    SyntaxFactory.SeparatedList<ExpressionSyntax>(
                                                        new SyntaxNodeOrToken[]{
                                                            SyntaxFactory.AssignmentExpression(
                                                                SyntaxKind.SimpleAssignmentExpression,
                                                                SyntaxFactory.IdentifierName("Guid"),
                                                                SyntaxFactory.MemberAccessExpression(
                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                    SyntaxFactory.IdentifierName(imageIdsClassName),
                                                                    SyntaxFactory.IdentifierName(guidSymbolName))),
                                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                            SyntaxFactory.AssignmentExpression(
                                                                SyntaxKind.SimpleAssignmentExpression,
                                                                SyntaxFactory.IdentifierName("Id"),
                                                                SyntaxFactory.MemberAccessExpression(
                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                    SyntaxFactory.IdentifierName(imageIdsClassName),
                                                                    SyntaxFactory.IdentifierName(monikerIdentifierName)))}))))))))));
        }

        private static NamespaceDeclarationSyntax GenerateNamespaceDeclaration(string identifierName)
        {
            return SyntaxFactory.NamespaceDeclaration(SyntaxFactory.IdentifierName(identifierName));
        }
        private static UsingDirectiveSyntax GenerateUsingDirective(string identifierName)
        {
            return SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName(identifierName));
        }


        private static SyntaxList<UsingDirectiveSyntax> GenerateUsings(params string[] identifiers)
        {
            SyntaxList<UsingDirectiveSyntax> list = SyntaxFactory.List<UsingDirectiveSyntax>();
            foreach (string identifier in identifiers)
            {
                list = list.Add(GenerateUsingDirective(identifier));
            }
            return list;
        }
    }
}